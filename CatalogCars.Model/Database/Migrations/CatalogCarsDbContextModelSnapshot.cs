// <auto-generated />
using System;
using CatalogCars.Model.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CatalogCars.Model.Database.Migrations
{
    [DbContext(typeof(CatalogCarsDbContext))]
    partial class CatalogCarsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.Announcement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AvailabilityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ColorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SaleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SalonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SellerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SellerTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AvailabilityId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ColorId");

                    b.HasIndex("SalonId");

                    b.HasIndex("SectionId");

                    b.HasIndex("SellerId");

                    b.HasIndex("SellerTypeId");

                    b.HasIndex("StatusId");

                    b.ToTable("Announcements");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.AnnouncementAdditionalInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AnnouncementId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AnnouncementId")
                        .IsUnique();

                    b.ToTable("AnnouncementAdditionalInformation");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.AnnouncementDescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AnnouncementId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AnnouncementId")
                        .IsUnique();

                    b.ToTable("AnnouncementDescriptions");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.AnnouncementTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AnnouncementId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AnnouncementId");

                    b.HasIndex("TagId");

                    b.ToTable("AnnouncementTags");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("21f7b496-c675-4e8a-a34c-fc5ec0762fdb"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c2f91154-e11f-45bf-8ac4-65429a3b2ae0",
                            Email = "andrey.levchenko.2001@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ANDREY.LEVCHENKO.2001@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEG/JYnPbyLgN0SGBYoNw8p4nuqMfwX2dj4UF174w9ZJKOtJZmwxqEAw4Jx0LXDc6aw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        });
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.ApplicatonRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b867520a-92db-4658-be39-84da53a601c0"),
                            ConcurrencyStamp = "85a98b49-fa77-448c-bdbe-1aba3c162fa0",
                            Name = "Администратор",
                            NormalizedName = "АДМИНИСТРАТОР"
                        });
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.Availability", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RuName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Availabilities");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.BodyType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BodyTypeGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RuName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BodyTypeGroupId");

                    b.ToTable("BodyTypes");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.BodyTypeGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AutoClass")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RuName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BodyTypeGroups");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RuName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.Color", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.HasKey("Id");

                    b.ToTable("Colors");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.ColorType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RuName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ColorTypes");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.Complectation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RuName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId")
                        .IsUnique();

                    b.ToTable("Complectations");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.ComplectationOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ComplectationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OptionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ComplectationId");

                    b.HasIndex("OptionId");

                    b.ToTable("ComplectationOptions");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.Configuration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BodyTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DoorsCount")
                        .HasColumnType("int");

                    b.Property<double?>("TrunkVolumeMax")
                        .HasColumnType("float");

                    b.Property<double?>("TrunkVolumeMin")
                        .HasColumnType("float");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BodyTypeId");

                    b.HasIndex("VehicleId")
                        .IsUnique();

                    b.ToTable("Configurations");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.ConfigurationTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConfigurationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ConfigurationId");

                    b.HasIndex("TagId");

                    b.ToTable("ConfigurationTags");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.Coordinate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("LocationId")
                        .IsUnique();

                    b.ToTable("Coordinates");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.Currency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Designation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.Documents", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AnnouncementId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LicensePlate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Warranty")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("WarrantyExpire")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AnnouncementId")
                        .IsUnique();

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.EngineType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RuName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EngineTypes");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.ExternalPanorama", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Preview")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("QualityR16x9")
                        .HasColumnType("float");

                    b.Property<double>("QualityR4x3")
                        .HasColumnType("float");

                    b.Property<Guid>("StateId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StateId")
                        .IsUnique();

                    b.ToTable("ExternalPanoramas");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.GearType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RuName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GearTypes");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.Generation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PriceSegmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RuName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("YearFrom")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ModelId");

                    b.HasIndex("PriceSegmentId");

                    b.ToTable("Generations");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GeobaseId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RegionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.Mark", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RuName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Marks");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.MarkLogo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BigLogo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BlackLogo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MarkId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RuName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MarkId")
                        .IsUnique();

                    b.ToTable("MarkLogos");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.Model", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MarkId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RuName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MarkId");

                    b.ToTable("Models");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.Option", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RuName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Options");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.Phone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Phones");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.PhotoClass", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RuName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PhotoClasses");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.PictureJpeg", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ExternalPanoramaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FullFirstFrame")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HighResFirstFrame")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreviewFirstFrame")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ExternalPanoramaId")
                        .IsUnique();

                    b.ToTable("PicturesJpeg");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.PictureJpegR16x9", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ExternalPanoramaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FullFirstFrame")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HighResFirstFrame")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreviewFirstFrame")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ExternalPanoramaId")
                        .IsUnique();

                    b.ToTable("PicturesJpegR16X9");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.PicturePng", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ExternalPanoramaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FullFirstFrame")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HighResFirstFrame")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreviewFirstFrame")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ExternalPanoramaId")
                        .IsUnique();

                    b.ToTable("PicturesPng");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.PicturePngR16x9", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ExternalPanoramaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FullFirstFrame")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HighResFirstFrame")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreviewFirstFrame")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ExternalPanoramaId")
                        .IsUnique();

                    b.ToTable("PicturesPngR16X9");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.PictureWebp", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ExternalPanoramaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FullFirstFrame")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HighResFirstFrame")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreviewFirstFrame")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ExternalPanoramaId")
                        .IsUnique();

                    b.ToTable("PicturesWebp");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.PictureWebpR16x9", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ExternalPanoramaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FullFirstFrame")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HighResFirstFrame")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreviewFirstFrame")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ExternalPanoramaId")
                        .IsUnique();

                    b.ToTable("PicturesWebpR16X9");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.Price", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AnnouncementId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.Property<bool>("WithNds")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AnnouncementId")
                        .IsUnique();

                    b.HasIndex("CurrencyId");

                    b.ToTable("Prices");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.PriceSegment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RuName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PriceSegments");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.Pts", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("CustomCleared")
                        .HasColumnType("bit");

                    b.Property<Guid>("DocumentsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsOriginal")
                        .HasColumnType("bit");

                    b.Property<bool?>("NotRegisteredInRussia")
                        .HasColumnType("bit");

                    b.Property<int?>("OwnersNumber")
                        .HasColumnType("int");

                    b.Property<Guid?>("PtsTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DocumentsId")
                        .IsUnique();

                    b.HasIndex("PtsTypeId");

                    b.ToTable("Pts");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.PtsType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RuName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PtsTypes");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.RegionInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Accusative")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dative")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Genitive")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Preposition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prepositional")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StringId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.Salon", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("ActualStock")
                        .HasColumnType("bit");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsOfficial")
                        .HasColumnType("bit");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("LoyaltyProgram")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Salons");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.SalonPhone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PhoneId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SalonId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PhoneId");

                    b.HasIndex("SalonId");

                    b.ToTable("SalonPhones");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.Section", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RuName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.Seller", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Sellers");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.SellerPhone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PhoneId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SellerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PhoneId");

                    b.HasIndex("SellerId");

                    b.ToTable("SellerPhones");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.SellerType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RuName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SellerTypes");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.State", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AnnouncementId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsBeaten")
                        .HasColumnType("bit");

                    b.Property<int>("Mileage")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AnnouncementId")
                        .IsUnique();

                    b.ToTable("States");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.StatePhoto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Preview")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Resolution1200x900")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Resolution1200x900n")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Resolution320x240")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Resolution456x342")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Resolution456x342n")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Small")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ThumbM")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("StateId");

                    b.ToTable("StatePhotos");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.Status", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RuName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.SteeringWheel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RuName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SteeringWheels");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RuName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.TechnicalParameters", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Acceleration")
                        .HasColumnType("float");

                    b.Property<int>("ClearanceMin")
                        .HasColumnType("int");

                    b.Property<int>("Displacement")
                        .HasColumnType("int");

                    b.Property<Guid>("EngineTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("FuelRate")
                        .HasColumnType("float");

                    b.Property<Guid>("GearTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("HumanName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nameplate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Power")
                        .HasColumnType("int");

                    b.Property<int>("PowerKvt")
                        .HasColumnType("int");

                    b.Property<Guid>("TransmissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EngineTypeId");

                    b.HasIndex("GearTypeId");

                    b.HasIndex("TransmissionId");

                    b.HasIndex("VehicleId")
                        .IsUnique();

                    b.ToTable("TechnicalParameters");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.Transmission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RuName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Transmissions");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.VehicleInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AnnouncementId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GenerationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SteeringWheelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VendorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AnnouncementId")
                        .IsUnique();

                    b.HasIndex("GenerationId");

                    b.HasIndex("SteeringWheelId");

                    b.HasIndex("VendorId");

                    b.ToTable("VehicleInformation");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.VehicleMainPhoto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Cattouch")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ConfigurationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Original")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Wizardv3mr")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ConfigurationId")
                        .IsUnique();

                    b.ToTable("VehicleMainPhotos");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.Vendor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RuName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Vendors");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.VendorColor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ColorTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ComplectationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("HexCode")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("HexCodes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsMainColor")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RuName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ColorTypeId");

                    b.HasIndex("ComplectationId");

                    b.ToTable("VendorColors");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.VendorColorPhoto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AutoMain")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cattouch")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Full")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IslandOff")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Orig")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Resolution1200x900")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Resolution1200x900n")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Resolution120x90")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Resolution320x240")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Resolution456x342")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Resolution832x624")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Resolution92x69")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Small")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThumbM")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThumbS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThumbS2x")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("VendorColorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Wizardv3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Wizardv3mr")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("VendorColorId");

                    b.ToTable("VendorColorPhotos");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.VideoH264", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ExternalPanoramaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FullUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HighResUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LowResUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreviewUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ExternalPanoramaId")
                        .IsUnique();

                    b.ToTable("VideosH264");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.VideoMp4R16x9", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ExternalPanoramaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FullUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HighResUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LowResUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreviewUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ExternalPanoramaId")
                        .IsUnique();

                    b.ToTable("VideosMp4R16X9");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.VideoWebm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ExternalPanoramaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FullUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HighResUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LowResUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreviewUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ExternalPanoramaId")
                        .IsUnique();

                    b.ToTable("VideosWebm");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.VideoWebmR16x9", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ExternalPanoramaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FullUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HighResUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LowResUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreviewUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ExternalPanoramaId")
                        .IsUnique();

                    b.ToTable("VideosWebmR16X9");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.Vin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PtsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ResolutionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PtsId")
                        .IsUnique();

                    b.HasIndex("ResolutionId");

                    b.ToTable("Vins");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.VinResolution", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RuName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("VinResolutions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("21f7b496-c675-4e8a-a34c-fc5ec0762fdb"),
                            RoleId = new Guid("b867520a-92db-4658-be39-84da53a601c0")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.Announcement", b =>
                {
                    b.HasOne("CatalogCars.Model.Database.Entities.Availability", "Availability")
                        .WithMany("Announcements")
                        .HasForeignKey("AvailabilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CatalogCars.Model.Database.Entities.Category", "Category")
                        .WithMany("Announcements")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CatalogCars.Model.Database.Entities.Color", "Color")
                        .WithMany("Announcements")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CatalogCars.Model.Database.Entities.Salon", "Salon")
                        .WithMany("Announcements")
                        .HasForeignKey("SalonId");

                    b.HasOne("CatalogCars.Model.Database.Entities.Section", "Section")
                        .WithMany("Announcements")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CatalogCars.Model.Database.Entities.Seller", "Seller")
                        .WithMany("Announcements")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CatalogCars.Model.Database.Entities.SellerType", "SellerType")
                        .WithMany("Announcements")
                        .HasForeignKey("SellerTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CatalogCars.Model.Database.Entities.Status", "Status")
                        .WithMany("Announcements")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Availability");

                    b.Navigation("Category");

                    b.Navigation("Color");

                    b.Navigation("Salon");

                    b.Navigation("Section");

                    b.Navigation("Seller");

                    b.Navigation("SellerType");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.AnnouncementAdditionalInformation", b =>
                {
                    b.HasOne("CatalogCars.Model.Database.Entities.Announcement", "Announcement")
                        .WithOne("AdditionalInformation")
                        .HasForeignKey("CatalogCars.Model.Database.Entities.AnnouncementAdditionalInformation", "AnnouncementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Announcement");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.AnnouncementDescription", b =>
                {
                    b.HasOne("CatalogCars.Model.Database.Entities.Announcement", "Announcement")
                        .WithOne("Description")
                        .HasForeignKey("CatalogCars.Model.Database.Entities.AnnouncementDescription", "AnnouncementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Announcement");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.AnnouncementTag", b =>
                {
                    b.HasOne("CatalogCars.Model.Database.Entities.Announcement", "Announcement")
                        .WithMany("Tags")
                        .HasForeignKey("AnnouncementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CatalogCars.Model.Database.Entities.Tag", "Tag")
                        .WithMany("Announcements")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Announcement");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.BodyType", b =>
                {
                    b.HasOne("CatalogCars.Model.Database.Entities.BodyTypeGroup", "BodyTypeGroup")
                        .WithMany("BodyTypes")
                        .HasForeignKey("BodyTypeGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BodyTypeGroup");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.Complectation", b =>
                {
                    b.HasOne("CatalogCars.Model.Database.Entities.VehicleInformation", "Vehicle")
                        .WithOne("Complectation")
                        .HasForeignKey("CatalogCars.Model.Database.Entities.Complectation", "VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.ComplectationOption", b =>
                {
                    b.HasOne("CatalogCars.Model.Database.Entities.Complectation", "Complectation")
                        .WithMany("Options")
                        .HasForeignKey("ComplectationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CatalogCars.Model.Database.Entities.Option", "Option")
                        .WithMany("Complectations")
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Complectation");

                    b.Navigation("Option");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.Configuration", b =>
                {
                    b.HasOne("CatalogCars.Model.Database.Entities.BodyType", "BodyType")
                        .WithMany("Configurations")
                        .HasForeignKey("BodyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CatalogCars.Model.Database.Entities.VehicleInformation", "Vehicle")
                        .WithOne("Configuration")
                        .HasForeignKey("CatalogCars.Model.Database.Entities.Configuration", "VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BodyType");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.ConfigurationTag", b =>
                {
                    b.HasOne("CatalogCars.Model.Database.Entities.Configuration", "Configuration")
                        .WithMany("Tags")
                        .HasForeignKey("ConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CatalogCars.Model.Database.Entities.Tag", "Tag")
                        .WithMany("Configurations")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Configuration");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.Coordinate", b =>
                {
                    b.HasOne("CatalogCars.Model.Database.Entities.Location", "Location")
                        .WithOne("Coordinate")
                        .HasForeignKey("CatalogCars.Model.Database.Entities.Coordinate", "LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.Documents", b =>
                {
                    b.HasOne("CatalogCars.Model.Database.Entities.Announcement", "Announcement")
                        .WithOne("Documents")
                        .HasForeignKey("CatalogCars.Model.Database.Entities.Documents", "AnnouncementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Announcement");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.ExternalPanorama", b =>
                {
                    b.HasOne("CatalogCars.Model.Database.Entities.State", "State")
                        .WithOne("ExternalPanorama")
                        .HasForeignKey("CatalogCars.Model.Database.Entities.ExternalPanorama", "StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.Generation", b =>
                {
                    b.HasOne("CatalogCars.Model.Database.Entities.Model", "Model")
                        .WithMany("Generations")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CatalogCars.Model.Database.Entities.PriceSegment", "PriceSegment")
                        .WithMany("Generations")
                        .HasForeignKey("PriceSegmentId");

                    b.Navigation("Model");

                    b.Navigation("PriceSegment");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.Location", b =>
                {
                    b.HasOne("CatalogCars.Model.Database.Entities.RegionInformation", "Region")
                        .WithMany("Locations")
                        .HasForeignKey("RegionId");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.MarkLogo", b =>
                {
                    b.HasOne("CatalogCars.Model.Database.Entities.Mark", "Mark")
                        .WithOne("Logo")
                        .HasForeignKey("CatalogCars.Model.Database.Entities.MarkLogo", "MarkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mark");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.Model", b =>
                {
                    b.HasOne("CatalogCars.Model.Database.Entities.Mark", "Mark")
                        .WithMany("Models")
                        .HasForeignKey("MarkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mark");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.PictureJpeg", b =>
                {
                    b.HasOne("CatalogCars.Model.Database.Entities.ExternalPanorama", "ExternalPanorama")
                        .WithOne("PictureJpeg")
                        .HasForeignKey("CatalogCars.Model.Database.Entities.PictureJpeg", "ExternalPanoramaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExternalPanorama");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.PictureJpegR16x9", b =>
                {
                    b.HasOne("CatalogCars.Model.Database.Entities.ExternalPanorama", "ExternalPanorama")
                        .WithOne("PictureJpegR16x9")
                        .HasForeignKey("CatalogCars.Model.Database.Entities.PictureJpegR16x9", "ExternalPanoramaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExternalPanorama");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.PicturePng", b =>
                {
                    b.HasOne("CatalogCars.Model.Database.Entities.ExternalPanorama", "ExternalPanorama")
                        .WithOne("PicturePng")
                        .HasForeignKey("CatalogCars.Model.Database.Entities.PicturePng", "ExternalPanoramaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExternalPanorama");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.PicturePngR16x9", b =>
                {
                    b.HasOne("CatalogCars.Model.Database.Entities.ExternalPanorama", "ExternalPanorama")
                        .WithOne("PicturePngR16x9")
                        .HasForeignKey("CatalogCars.Model.Database.Entities.PicturePngR16x9", "ExternalPanoramaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExternalPanorama");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.PictureWebp", b =>
                {
                    b.HasOne("CatalogCars.Model.Database.Entities.ExternalPanorama", "ExternalPanorama")
                        .WithOne("PictureWebp")
                        .HasForeignKey("CatalogCars.Model.Database.Entities.PictureWebp", "ExternalPanoramaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExternalPanorama");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.PictureWebpR16x9", b =>
                {
                    b.HasOne("CatalogCars.Model.Database.Entities.ExternalPanorama", "ExternalPanorama")
                        .WithOne("PictureWebpR16x9")
                        .HasForeignKey("CatalogCars.Model.Database.Entities.PictureWebpR16x9", "ExternalPanoramaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExternalPanorama");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.Price", b =>
                {
                    b.HasOne("CatalogCars.Model.Database.Entities.Announcement", "Announcement")
                        .WithOne("Price")
                        .HasForeignKey("CatalogCars.Model.Database.Entities.Price", "AnnouncementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CatalogCars.Model.Database.Entities.Currency", "Currency")
                        .WithMany("Prices")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Announcement");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.Pts", b =>
                {
                    b.HasOne("CatalogCars.Model.Database.Entities.Documents", "Documents")
                        .WithOne("Pts")
                        .HasForeignKey("CatalogCars.Model.Database.Entities.Pts", "DocumentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CatalogCars.Model.Database.Entities.PtsType", "PtsType")
                        .WithMany("Pts")
                        .HasForeignKey("PtsTypeId");

                    b.Navigation("Documents");

                    b.Navigation("PtsType");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.Salon", b =>
                {
                    b.HasOne("CatalogCars.Model.Database.Entities.Location", "Location")
                        .WithMany("Salons")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.SalonPhone", b =>
                {
                    b.HasOne("CatalogCars.Model.Database.Entities.Phone", "Phone")
                        .WithMany("Salons")
                        .HasForeignKey("PhoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CatalogCars.Model.Database.Entities.Salon", "Salon")
                        .WithMany("Phones")
                        .HasForeignKey("SalonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Phone");

                    b.Navigation("Salon");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.Seller", b =>
                {
                    b.HasOne("CatalogCars.Model.Database.Entities.Location", "Location")
                        .WithMany("Sellers")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.SellerPhone", b =>
                {
                    b.HasOne("CatalogCars.Model.Database.Entities.Phone", "Phone")
                        .WithMany("Sellers")
                        .HasForeignKey("PhoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CatalogCars.Model.Database.Entities.Seller", "Seller")
                        .WithMany("Phones")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Phone");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.State", b =>
                {
                    b.HasOne("CatalogCars.Model.Database.Entities.Announcement", "Announcement")
                        .WithOne("State")
                        .HasForeignKey("CatalogCars.Model.Database.Entities.State", "AnnouncementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Announcement");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.StatePhoto", b =>
                {
                    b.HasOne("CatalogCars.Model.Database.Entities.PhotoClass", "Class")
                        .WithMany("States")
                        .HasForeignKey("ClassId");

                    b.HasOne("CatalogCars.Model.Database.Entities.State", "State")
                        .WithMany("Photos")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("State");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.TechnicalParameters", b =>
                {
                    b.HasOne("CatalogCars.Model.Database.Entities.EngineType", "EngineType")
                        .WithMany("TechnicalParameters")
                        .HasForeignKey("EngineTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CatalogCars.Model.Database.Entities.GearType", "GearType")
                        .WithMany("TechnicalParameters")
                        .HasForeignKey("GearTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CatalogCars.Model.Database.Entities.Transmission", "Transmission")
                        .WithMany("TechnicalParameters")
                        .HasForeignKey("TransmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CatalogCars.Model.Database.Entities.VehicleInformation", "Vehicle")
                        .WithOne("TechnicalParameters")
                        .HasForeignKey("CatalogCars.Model.Database.Entities.TechnicalParameters", "VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EngineType");

                    b.Navigation("GearType");

                    b.Navigation("Transmission");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.VehicleInformation", b =>
                {
                    b.HasOne("CatalogCars.Model.Database.Entities.Announcement", "Announcement")
                        .WithOne("Vehicle")
                        .HasForeignKey("CatalogCars.Model.Database.Entities.VehicleInformation", "AnnouncementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CatalogCars.Model.Database.Entities.Generation", "Generation")
                        .WithMany("Vehicles")
                        .HasForeignKey("GenerationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CatalogCars.Model.Database.Entities.SteeringWheel", "SteeringWheel")
                        .WithMany("VehicleInformation")
                        .HasForeignKey("SteeringWheelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CatalogCars.Model.Database.Entities.Vendor", "Vendor")
                        .WithMany("Vehicles")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Announcement");

                    b.Navigation("Generation");

                    b.Navigation("SteeringWheel");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.VehicleMainPhoto", b =>
                {
                    b.HasOne("CatalogCars.Model.Database.Entities.Configuration", "Configuration")
                        .WithOne("MainPhoto")
                        .HasForeignKey("CatalogCars.Model.Database.Entities.VehicleMainPhoto", "ConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Configuration");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.VendorColor", b =>
                {
                    b.HasOne("CatalogCars.Model.Database.Entities.ColorType", "ColorType")
                        .WithMany("VendorColors")
                        .HasForeignKey("ColorTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CatalogCars.Model.Database.Entities.Complectation", "Complectation")
                        .WithMany("VendorColors")
                        .HasForeignKey("ComplectationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ColorType");

                    b.Navigation("Complectation");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.VendorColorPhoto", b =>
                {
                    b.HasOne("CatalogCars.Model.Database.Entities.VendorColor", "VendorColor")
                        .WithMany("Photos")
                        .HasForeignKey("VendorColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VendorColor");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.VideoH264", b =>
                {
                    b.HasOne("CatalogCars.Model.Database.Entities.ExternalPanorama", "ExternalPanorama")
                        .WithOne("VideoH264")
                        .HasForeignKey("CatalogCars.Model.Database.Entities.VideoH264", "ExternalPanoramaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExternalPanorama");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.VideoMp4R16x9", b =>
                {
                    b.HasOne("CatalogCars.Model.Database.Entities.ExternalPanorama", "ExternalPanorama")
                        .WithOne("VideoMp4R16x9")
                        .HasForeignKey("CatalogCars.Model.Database.Entities.VideoMp4R16x9", "ExternalPanoramaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExternalPanorama");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.VideoWebm", b =>
                {
                    b.HasOne("CatalogCars.Model.Database.Entities.ExternalPanorama", "ExternalPanorama")
                        .WithOne("VideoWebm")
                        .HasForeignKey("CatalogCars.Model.Database.Entities.VideoWebm", "ExternalPanoramaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExternalPanorama");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.VideoWebmR16x9", b =>
                {
                    b.HasOne("CatalogCars.Model.Database.Entities.ExternalPanorama", "ExternalPanorama")
                        .WithOne("VideoWebmR16x9")
                        .HasForeignKey("CatalogCars.Model.Database.Entities.VideoWebmR16x9", "ExternalPanoramaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExternalPanorama");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.Vin", b =>
                {
                    b.HasOne("CatalogCars.Model.Database.Entities.Pts", "Pts")
                        .WithOne("Vin")
                        .HasForeignKey("CatalogCars.Model.Database.Entities.Vin", "PtsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CatalogCars.Model.Database.Entities.VinResolution", "Resolution")
                        .WithMany("Vins")
                        .HasForeignKey("ResolutionId");

                    b.Navigation("Pts");

                    b.Navigation("Resolution");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("CatalogCars.Model.Database.Entities.ApplicatonRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("CatalogCars.Model.Database.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("CatalogCars.Model.Database.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("CatalogCars.Model.Database.Entities.ApplicatonRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CatalogCars.Model.Database.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("CatalogCars.Model.Database.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.Announcement", b =>
                {
                    b.Navigation("AdditionalInformation");

                    b.Navigation("Description");

                    b.Navigation("Documents");

                    b.Navigation("Price");

                    b.Navigation("State");

                    b.Navigation("Tags");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.Availability", b =>
                {
                    b.Navigation("Announcements");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.BodyType", b =>
                {
                    b.Navigation("Configurations");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.BodyTypeGroup", b =>
                {
                    b.Navigation("BodyTypes");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.Category", b =>
                {
                    b.Navigation("Announcements");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.Color", b =>
                {
                    b.Navigation("Announcements");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.ColorType", b =>
                {
                    b.Navigation("VendorColors");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.Complectation", b =>
                {
                    b.Navigation("Options");

                    b.Navigation("VendorColors");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.Configuration", b =>
                {
                    b.Navigation("MainPhoto");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.Currency", b =>
                {
                    b.Navigation("Prices");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.Documents", b =>
                {
                    b.Navigation("Pts");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.EngineType", b =>
                {
                    b.Navigation("TechnicalParameters");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.ExternalPanorama", b =>
                {
                    b.Navigation("PictureJpeg");

                    b.Navigation("PictureJpegR16x9");

                    b.Navigation("PicturePng");

                    b.Navigation("PicturePngR16x9");

                    b.Navigation("PictureWebp");

                    b.Navigation("PictureWebpR16x9");

                    b.Navigation("VideoH264");

                    b.Navigation("VideoMp4R16x9");

                    b.Navigation("VideoWebm");

                    b.Navigation("VideoWebmR16x9");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.GearType", b =>
                {
                    b.Navigation("TechnicalParameters");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.Generation", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.Location", b =>
                {
                    b.Navigation("Coordinate");

                    b.Navigation("Salons");

                    b.Navigation("Sellers");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.Mark", b =>
                {
                    b.Navigation("Logo");

                    b.Navigation("Models");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.Model", b =>
                {
                    b.Navigation("Generations");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.Option", b =>
                {
                    b.Navigation("Complectations");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.Phone", b =>
                {
                    b.Navigation("Salons");

                    b.Navigation("Sellers");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.PhotoClass", b =>
                {
                    b.Navigation("States");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.PriceSegment", b =>
                {
                    b.Navigation("Generations");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.Pts", b =>
                {
                    b.Navigation("Vin");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.PtsType", b =>
                {
                    b.Navigation("Pts");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.RegionInformation", b =>
                {
                    b.Navigation("Locations");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.Salon", b =>
                {
                    b.Navigation("Announcements");

                    b.Navigation("Phones");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.Section", b =>
                {
                    b.Navigation("Announcements");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.Seller", b =>
                {
                    b.Navigation("Announcements");

                    b.Navigation("Phones");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.SellerType", b =>
                {
                    b.Navigation("Announcements");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.State", b =>
                {
                    b.Navigation("ExternalPanorama");

                    b.Navigation("Photos");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.Status", b =>
                {
                    b.Navigation("Announcements");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.SteeringWheel", b =>
                {
                    b.Navigation("VehicleInformation");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.Tag", b =>
                {
                    b.Navigation("Announcements");

                    b.Navigation("Configurations");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.Transmission", b =>
                {
                    b.Navigation("TechnicalParameters");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.VehicleInformation", b =>
                {
                    b.Navigation("Complectation");

                    b.Navigation("Configuration");

                    b.Navigation("TechnicalParameters");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.Vendor", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.VendorColor", b =>
                {
                    b.Navigation("Photos");
                });

            modelBuilder.Entity("CatalogCars.Model.Database.Entities.VinResolution", b =>
                {
                    b.Navigation("Vins");
                });
#pragma warning restore 612, 618
        }
    }
}
